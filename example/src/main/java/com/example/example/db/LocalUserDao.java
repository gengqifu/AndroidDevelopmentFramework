package com.example.example.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LocalUser".
 */
public class LocalUserDao extends AbstractDao<LocalUser, String> {

    public static final String TABLENAME = "LocalUser";

    /**
     * Properties of entity LocalUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property User_password = new Property(2, String.class, "user_password", false, "USER_PASSWORD");
        public final static Property Cloud_name = new Property(3, String.class, "cloud_name", false, "CLOUD_NAME");
        public final static Property Login_flg = new Property(4, Integer.class, "login_flg", false, "LOGIN_FLG");
        public final static Property Cloud_type = new Property(5, Integer.class, "cloud_type", false, "CLOUD_TYPE");
        public final static Property Token = new Property(6, String.class, "token", false, "TOKEN");
        public final static Property Refresh_token = new Property(7, String.class, "refresh_token", false, "REFRESH_TOKEN");
        public final static Property Current_account = new Property(8, Boolean.class, "current_account", false, "CURRENT_ACCOUNT");
        public final static Property Did = new Property(9, String.class, "did", false, "DID");
    }


    public LocalUserDao(DaoConfig config) {
        super(config);
    }

    public LocalUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"LocalUser\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: user_id
                "\"USER_NAME\" TEXT," + // 1: user_name
                "\"USER_PASSWORD\" TEXT," + // 2: user_password
                "\"CLOUD_NAME\" TEXT," + // 3: cloud_name
                "\"LOGIN_FLG\" INTEGER," + // 4: login_flg
                "\"CLOUD_TYPE\" INTEGER," + // 5: cloud_type
                "\"TOKEN\" TEXT," + // 6: token
                "\"REFRESH_TOKEN\" TEXT," + // 7: refresh_token
                "\"CURRENT_ACCOUNT\" INTEGER," + // 8: current_account
                "\"DID\" TEXT);"); // 9: did
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LocalUser\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalUser entity) {
        stmt.clearBindings();

        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }

        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }

        String user_password = entity.getUser_password();
        if (user_password != null) {
            stmt.bindString(3, user_password);
        }

        String cloud_name = entity.getCloud_name();
        if (cloud_name != null) {
            stmt.bindString(4, cloud_name);
        }

        Integer login_flg = entity.getLogin_flg();
        if (login_flg != null) {
            stmt.bindLong(5, login_flg);
        }

        Integer cloud_type = entity.getCloud_type();
        if (cloud_type != null) {
            stmt.bindLong(6, cloud_type);
        }

        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }

        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(8, refresh_token);
        }

        Boolean current_account = entity.getCurrent_account();
        if (current_account != null) {
            stmt.bindLong(9, current_account ? 1L : 0L);
        }

        String did = entity.getDid();
        if (did != null) {
            stmt.bindString(10, did);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public LocalUser readEntity(Cursor cursor, int offset) {
        LocalUser entity = new LocalUser( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_password
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cloud_name
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // login_flg
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // cloud_type
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // token
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // refresh_token
                cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // current_account
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // did
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, LocalUser entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_password(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCloud_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogin_flg(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCloud_type(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRefresh_token(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCurrent_account(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setDid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(LocalUser entity, long rowId) {
        return entity.getUser_id();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(LocalUser entity) {
        if (entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
