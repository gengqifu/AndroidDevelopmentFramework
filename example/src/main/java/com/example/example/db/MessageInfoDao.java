package com.example.example.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MessageInfo".
 */
public class MessageInfoDao extends AbstractDao<MessageInfo, Long> {

    public static final String TABLENAME = "MessageInfo";

    /**
     * Properties of entity MessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Did = new Property(0, String.class, "did", false, "DID");
        public final static Property Id = new Property(1, Long.class, "id", true, "ID");
        public final static Property ImgUrl = new Property(2, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Uid = new Property(7, String.class, "uid", false, "UID");
        public final static Property DeleteStatus = new Property(8, Boolean.class, "deleteStatus", false, "DELETE_STATUS");
        public final static Property ReadStatus = new Property(9, Boolean.class, "readStatus", false, "READ_STATUS");
        public final static Property VideoFileId = new Property(10, String.class, "videoFileId", false, "VIDEO_FILE_ID");
        public final static Property VideoUrl = new Property(11, String.class, "videoUrl", false, "VIDEO_URL");
    }


    public MessageInfoDao(DaoConfig config) {
        super(config);
    }

    public MessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"MessageInfo\" (" + //
                "\"DID\" TEXT," + // 0: did
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: id
                "\"IMG_URL\" TEXT," + // 2: imgUrl
                "\"MESSAGE\" TEXT," + // 3: message
                "\"TIME\" TEXT," + // 4: time
                "\"TITLE\" TEXT," + // 5: title
                "\"TYPE\" TEXT," + // 6: type
                "\"UID\" TEXT," + // 7: uid
                "\"DELETE_STATUS\" INTEGER," + // 8: deleteStatus
                "\"READ_STATUS\" INTEGER," + // 9: readStatus
                "\"VIDEO_FILE_ID\" TEXT," + // 10: videoFileId
                "\"VIDEO_URL\" TEXT);"); // 11: videoUrl
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MessageInfo\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageInfo entity) {
        stmt.clearBindings();

        String did = entity.getDid();
        if (did != null) {
            stmt.bindString(1, did);
        }

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }

        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(3, imgUrl);
        }

        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }

        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }

        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(8, uid);
        }

        Boolean deleteStatus = entity.getDeleteStatus();
        if (deleteStatus != null) {
            stmt.bindLong(9, deleteStatus ? 1L : 0L);
        }

        Boolean readStatus = entity.getReadStatus();
        if (readStatus != null) {
            stmt.bindLong(10, readStatus ? 1L : 0L);
        }

        String videoFileId = entity.getVideoFileId();
        if (videoFileId != null) {
            stmt.bindString(11, videoFileId);
        }

        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(12, videoUrl);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MessageInfo readEntity(Cursor cursor, int offset) {
        MessageInfo entity = new MessageInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // did
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imgUrl
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uid
                cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // deleteStatus
                cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // readStatus
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // videoFileId
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // videoUrl
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MessageInfo entity, int offset) {
        entity.setDid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setImgUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeleteStatus(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setReadStatus(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setVideoFileId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVideoUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(MessageInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(MessageInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
