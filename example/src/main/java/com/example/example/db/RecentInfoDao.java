package com.example.example.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RecentInfo".
 */
public class RecentInfoDao extends AbstractDao<RecentInfo, Long> {

    public static final String TABLENAME = "RecentInfo";

    /**
     * Properties of entity RecentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FileType = new Property(0, String.class, "fileType", false, "FILE_TYPE");
        public final static Property User = new Property(1, String.class, "user", false, "USER");
        public final static Property Did = new Property(2, String.class, "did", false, "DID");
        public final static Property FilePath = new Property(3, String.class, "filePath", false, "FILE_PATH");
        public final static Property Time = new Property(4, Long.class, "time", true, "TIME");
        public final static Property IsLocal = new Property(5, Boolean.class, "isLocal", false, "IS_LOCAL");
        public final static Property FileName = new Property(6, String.class, "fileName", false, "FILE_NAME");
        public final static Property Id = new Property(7, String.class, "id", false, "ID");
        public final static Property CreateTime = new Property(8, String.class, "createTime", false, "CREATE_TIME");
        public final static Property FileSize = new Property(9, String.class, "fileSize", false, "FILE_SIZE");
        public final static Property MusicAlbum = new Property(10, String.class, "musicAlbum", false, "MUSIC_ALBUM");
        public final static Property MusicSinger = new Property(11, String.class, "musicSinger", false, "MUSIC_SINGER");
        public final static Property MediaTime = new Property(12, String.class, "mediaTime", false, "MEDIA_TIME");
        public final static Property CollectFlg = new Property(13, Integer.class, "collectFlg", false, "COLLECT_FLG");
        public final static Property ShareFlg = new Property(14, Integer.class, "shareFlg", false, "SHARE_FLG");
    }


    public RecentInfoDao(DaoConfig config) {
        super(config);
    }

    public RecentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"RecentInfo\" (" + //
                "\"FILE_TYPE\" TEXT," + // 0: fileType
                "\"USER\" TEXT," + // 1: user
                "\"DID\" TEXT," + // 2: did
                "\"FILE_PATH\" TEXT," + // 3: filePath
                "\"TIME\" INTEGER PRIMARY KEY ," + // 4: time
                "\"IS_LOCAL\" INTEGER," + // 5: isLocal
                "\"FILE_NAME\" TEXT," + // 6: fileName
                "\"ID\" TEXT," + // 7: id
                "\"CREATE_TIME\" TEXT," + // 8: createTime
                "\"FILE_SIZE\" TEXT," + // 9: fileSize
                "\"MUSIC_ALBUM\" TEXT," + // 10: musicAlbum
                "\"MUSIC_SINGER\" TEXT," + // 11: musicSinger
                "\"MEDIA_TIME\" TEXT," + // 12: mediaTime
                "\"COLLECT_FLG\" INTEGER," + // 13: collectFlg
                "\"SHARE_FLG\" INTEGER);"); // 14: shareFlg
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RecentInfo\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecentInfo entity) {
        stmt.clearBindings();

        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(1, fileType);
        }

        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(2, user);
        }

        String did = entity.getDid();
        if (did != null) {
            stmt.bindString(3, did);
        }

        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }

        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }

        Boolean isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindLong(6, isLocal ? 1L : 0L);
        }

        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(7, fileName);
        }

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }

        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(9, createTime);
        }

        String fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindString(10, fileSize);
        }

        String musicAlbum = entity.getMusicAlbum();
        if (musicAlbum != null) {
            stmt.bindString(11, musicAlbum);
        }

        String musicSinger = entity.getMusicSinger();
        if (musicSinger != null) {
            stmt.bindString(12, musicSinger);
        }

        String mediaTime = entity.getMediaTime();
        if (mediaTime != null) {
            stmt.bindString(13, mediaTime);
        }

        Integer collectFlg = entity.getCollectFlg();
        if (collectFlg != null) {
            stmt.bindLong(14, collectFlg);
        }

        Integer shareFlg = entity.getShareFlg();
        if (shareFlg != null) {
            stmt.bindLong(15, shareFlg);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }

    /**
     * @inheritdoc
     */
    @Override
    public RecentInfo readEntity(Cursor cursor, int offset) {
        RecentInfo entity = new RecentInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fileType
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // did
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filePath
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // time
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isLocal
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fileName
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // id
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createTime
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fileSize
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // musicAlbum
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // musicSinger
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mediaTime
                cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // collectFlg
                cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // shareFlg
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, RecentInfo entity, int offset) {
        entity.setFileType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIsLocal(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setFileName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFileSize(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMusicAlbum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMusicSinger(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMediaTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCollectFlg(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setShareFlg(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(RecentInfo entity, long rowId) {
        entity.setTime(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(RecentInfo entity) {
        if (entity != null) {
            return entity.getTime();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
