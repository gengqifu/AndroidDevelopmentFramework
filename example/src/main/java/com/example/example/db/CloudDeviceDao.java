package com.example.example.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CloudDevice".
 */
public class CloudDeviceDao extends AbstractDao<CloudDevice, String> {

    public static final String TABLENAME = "CloudDevice";

    /**
     * Properties of entity CloudDevice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Did = new Property(0, String.class, "did", true, "DID");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Online = new Property(3, Integer.class, "online", false, "ONLINE");
        public final static Property Certificate = new Property(4, String.class, "certificate", false, "CERTIFICATE");
        public final static Property Key = new Property(5, String.class, "key", false, "KEY");
        public final static Property Token = new Property(6, String.class, "token", false, "TOKEN");
        public final static Property Current_device = new Property(7, Boolean.class, "current_device", false, "CURRENT_DEVICE");
        public final static Property Dname = new Property(8, String.class, "dname", false, "DNAME");
        public final static Property IsRelay = new Property(9, Integer.class, "isRelay", false, "IS_RELAY");
        public final static Property IsRemoteCan = new Property(10, Integer.class, "isRemoteCan", false, "IS_REMOTE_CAN");
    }


    public CloudDeviceDao(DaoConfig config) {
        super(config);
    }

    public CloudDeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"CloudDevice\" (" + //
                "\"DID\" TEXT PRIMARY KEY NOT NULL ," + // 0: did
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"ADDRESS\" TEXT," + // 2: address
                "\"ONLINE\" INTEGER," + // 3: online
                "\"CERTIFICATE\" TEXT," + // 4: certificate
                "\"KEY\" TEXT," + // 5: key
                "\"TOKEN\" TEXT," + // 6: token
                "\"CURRENT_DEVICE\" INTEGER," + // 7: current_device
                "\"DNAME\" TEXT," + // 8: dname
                "\"IS_RELAY\" INTEGER," + // 9: isRelay
                "\"IS_REMOTE_CAN\" INTEGER);"); // 10: isRemoteCan
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CloudDevice\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, CloudDevice entity) {
        stmt.clearBindings();

        String did = entity.getDid();
        if (did != null) {
            stmt.bindString(1, did);
        }

        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }

        Integer online = entity.getOnline();
        if (online != null) {
            stmt.bindLong(4, online);
        }

        String certificate = entity.getCertificate();
        if (certificate != null) {
            stmt.bindString(5, certificate);
        }

        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(6, key);
        }

        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }

        Boolean current_device = entity.getCurrent_device();
        if (current_device != null) {
            stmt.bindLong(8, current_device ? 1L : 0L);
        }

        String dname = entity.getDname();
        if (dname != null) {
            stmt.bindString(9, dname);
        }

        Integer isRelay = entity.getIsRelay();
        if (isRelay != null) {
            stmt.bindLong(10, isRelay);
        }

        Integer isRemoteCan = entity.getIsRemoteCan();
        if (isRemoteCan != null) {
            stmt.bindLong(11, isRemoteCan);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public CloudDevice readEntity(Cursor cursor, int offset) {
        CloudDevice entity = new CloudDevice( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // did
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // online
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // certificate
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // key
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // token
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // current_device
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dname
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isRelay
                cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // isRemoteCan
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, CloudDevice entity, int offset) {
        entity.setDid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOnline(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCertificate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCurrent_device(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setDname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsRelay(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIsRemoteCan(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(CloudDevice entity, long rowId) {
        return entity.getDid();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(CloudDevice entity) {
        if (entity != null) {
            return entity.getDid();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
