package com.example.example.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BackupPhotoInfo".
 */
public class BackupPhotoInfoDao extends AbstractDao<BackupPhotoInfo, Long> {

    public static final String TABLENAME = "BackupPhotoInfo";

    /**
     * Properties of entity BackupPhotoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property FilePath = new Property(2, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileSize = new Property(3, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property Md5 = new Property(4, String.class, "md5", false, "MD5");
        public final static Property State = new Property(5, Boolean.class, "state", false, "STATE");
        public final static Property CancelState = new Property(6, Integer.class, "cancelState", false, "CANCEL_STATE");
    }


    public BackupPhotoInfoDao(DaoConfig config) {
        super(config);
    }

    public BackupPhotoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"BackupPhotoInfo\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FILE_NAME\" TEXT," + // 1: fileName
                "\"FILE_PATH\" TEXT," + // 2: filePath
                "\"FILE_SIZE\" INTEGER," + // 3: fileSize
                "\"MD5\" TEXT," + // 4: md5
                "\"STATE\" INTEGER," + // 5: state
                "\"CANCEL_STATE\" INTEGER);"); // 6: cancelState
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BackupPhotoInfo\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, BackupPhotoInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }

        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }

        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(4, fileSize);
        }

        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(5, md5);
        }

        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(6, state ? 1L : 0L);
        }

        Integer cancelState = entity.getCancelState();
        if (cancelState != null) {
            stmt.bindLong(7, cancelState);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public BackupPhotoInfo readEntity(Cursor cursor, int offset) {
        BackupPhotoInfo entity = new BackupPhotoInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filePath
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // fileSize
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // md5
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // state
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // cancelState
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, BackupPhotoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileSize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMd5(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setCancelState(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(BackupPhotoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(BackupPhotoInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
